name: Deploy MkDocs

on:
  pull_request_target:
    types: [closed]  # √âcoute les PR ferm√©es
  push:
    branches:
      - 1811_testpr
      - 1811_mkdocs_documentation_website

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.repository }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get artifact ID from the latest successful run
        id: get_artifact
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflow_id = 'github-actions.yml'; 
            
            console.log('R√©cup√©ration des derniers artefacts');
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflow_id,
              status: "success",
              per_page: 1
            });

            if (runs.data.total_count === 0) { 
              console.log("Aucun artefact trouv√©. On continue quand m√™me.");
              return;
            }

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: runs.data.workflow_runs[0].id
            });

            const artifact = artifacts.data.artifacts.find(a => a.name === "github-pages");
            if (artifact) {
              console.log("Artifact trouv√© avec ID :", artifact.id);
              const response = await github.rest.actions.downloadArtifact({
                owner,
                repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              require('fs').writeFileSync("github-pages.zip", Buffer.from(response.data));
              require('child_process').execSync(`unzip -o github-pages.zip -d "/tmp/gh-artifact-extract" && mkdir -p docs/site && tar xvf /tmp/gh-artifact-extract/artifact.tar -C docs/site/`);
              console.log("Artefact t√©l√©charg√© et extrait");
            } else {
              console.log("Aucun artefact trouv√©.");
            }

      - name: Copy mkdocs.yml to the artifact folder
        run: |
          echo "üîÑ Copie du fichier mkdocs.yml dans le dossier de l'artifact"
          cp ../mkdocs.yml docs/

      - uses: actions/setup-python@v5
        with:
          python-version: 3.13.0

      - name: Install dependencies
        run: |
          echo "Installation des d√©pendances"
          pip install -r docs/requirements.txt

      - name: Build MkDocs site
        run: |
          echo "Compilation du site MkDocs"
          cd docs
          mkdocs build --site-dir site/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}

      - name: Upload static files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/site

  deploy:
    needs: build
    permissions:
      pages: write      
      id-token: write
      issues: write
      pull-requests: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # L'URL qui sera affich√©e dans l'environnement

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Override page_url
        id: change-page-url
        run: |
          echo "Mise √† jour de l'URL de d√©ploiement"
          if [[ "${GITHUB_REF}" == "refs/heads/1811_testpr" ]]; then
            echo "new_page_url=https://titouvgx.github.io/tock/1811_testpr/" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/1811_mkdocs_documentation_website" ]]; then
            echo "new_page_url=https://titouvgx.github.io/tock/1811_mkdocs_documentation_website/" >> $GITHUB_OUTPUT
          fi

      - uses: actions/github-script@v7
        name: Post comment
        if: ${{ github.event_name == 'pull_request_target'}}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Commentaire sur la PR :');
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Website is published: [${{ steps.change-page-url.outputs.new_page_url }}](${{ steps.change-page-url.outputs.new_page_url }})'
            });

  cleanup:
    if: ${{ github.event.pull_request.state == 'closed' }}  # Ex√©cuter lorsque la PR est ferm√©e
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        run: |
          echo "Clonage du d√©p√¥t pour pouvoir effectuer les commandes Git"
          git clone https://github.com/${{ github.repository }} repo
          cd repo
          git checkout ${{ github.event.pull_request.head.ref }}

      - name: R√©cup√©rer le dernier artifact
        id: get_latest_artifact
        run: |
          # R√©cup√©rer l'ID du dernier artifact valide
          ARTIFACT_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.ACTIONS_ARTIFACT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")

          # Trouver l'URL de t√©l√©chargement du dernier artifact valide
          ARTIFACT_URL=$(echo "$ARTIFACT_RESPONSE" | jq -r '.artifacts[] | select(.expired == false) | .archive_download_url' | head -n 1)

          if [ -z "$ARTIFACT_URL" ]; then
            echo "‚ùå Aucun artifact valide trouv√©."
            exit 1
          else
            echo "‚úÖ Artifact valide trouv√©. T√©l√©chargement..."
            echo "‚úÖ ID de l'artefact utilis√© : $(echo "$ARTIFACT_RESPONSE" | jq -r '.artifacts[] | select(.expired == false) | .id' | head -n 1)"
            curl -L -o github-pages.zip -H "Authorization: token ${{ secrets.ACTIONS_ARTIFACT_TOKEN }}" "$ARTIFACT_URL"
          fi


      - name: Installer MkDocs
        run: |
          echo "üîÑ Installation de MkDocs"
          pip install mkdocs

      - name: Reconstruction et republication de l'artifact pour la branche ferm√©e
        run: |
          branch_name="${{ github.event.pull_request.head.ref }}"
          echo "Reconstruction et republication de l'artifact pour la branche ${branch_name}"
          
          # V√©rification de la pr√©sence de mkdocs
          which mkdocs || { echo "‚ùå MkDocs introuvable"; exit 1; }

          # Ajout du dossier des binaires Python au PATH
          export PATH=$HOME/.local/bin:$PATH
          
          mkdir -p docs/site/${branch_name}
          cd docs
          mkdocs build --site-dir site/${branch_name}

          echo "‚úÖ Art√©fact reconstruit et publi√© avec succ√®s pour ${branch_name}."

      - name: Supprimer le dossier associ√© √† la PR ferm√©e
        run: |
          branch_name="${{ github.event.pull_request.head.ref }}"

          # √âtape 1 : D√©compression des artefacts
          echo "üîÑ D√©compression de github-pages.zip..."
          unzip github-pages.zip -d /tmp/gh-artifact-extract
          
          echo "üîÑ Extraction de artifact.tar..."
          tar xvf /tmp/gh-artifact-extract/artifact.tar -C /tmp/gh-artifact-extract/

          # √âtape 2 : Rechercher le vrai chemin du dossier
          echo "üìÇ Contenu extrait de artifact.tar :"
          ls -R /tmp/gh-artifact-extract/

          # On cherche le vrai dossier qui contient la PR
          folder_path=$(find /tmp/gh-artifact-extract/ -type d -name "${branch_name}")

          if [ -z "$folder_path" ]; then
            echo "‚ùå Aucun dossier trouv√© pour la branche ${branch_name} !"
            exit 1
          else
            echo "üõ†Ô∏è Chemin r√©el du dossier √† supprimer : $folder_path"
            rm -rf "$folder_path"
            echo "‚úÖ Dossier supprim√© avec succ√®s."
          fi


      - name: Republier l'artifact pour la branche ferm√©e
        run: |
          echo "Reconstruction et republication de l'artifact pour la branche ${branch_name}"
          mkdir -p docs/site/${branch_name}
          cd docs
          mkdocs build --site-dir site/${branch_name}

          # Republier l'artifact (facultatif)
          echo "Art√©fact publi√© pour la branche ${branch_name}"

      - name: Post cleanup comment
        run: |
          echo "Commentaire apr√®s nettoyage"
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Cleanup completed for PR and associated branch: [${{ github.event.pull_request.head.ref }}]'
          });
